// import cors from 'cors';
import { Server as SocketServer } from 'socket.io'

// Next.jsの型定義を拡張してSocket.IOの型定義を追加

// const corsMiddleware = cors();

// Next.jsのAPIルーティングの入り口となる関数
export default function SocketHandler (req, res) {
  console.log(req.body)
  if (req.method !== 'POST') {
    console.log('not post')
    return res.status(405).end()
  }
  if (res.socket.server.io) {
    console.log('already-set-up')
    return res.send('already-set-up')
  }
  // Socket.IOのサーバーを作成する
  const io = new SocketServer(res.socket.server, {
    addTrailingSlash: false
  })

  // クライアントが接続してきたら、コネクションを確立する
  io.on('connection', socket => {
    const clientId = socket.id
    console.log(`A client connected. ID: ${clientId}`)

    // メッセージを受信したら、全クライアントに送信する
    socket.on('message', data => {
      io.emit('message', data)
      console.log('Received message:', data)
    })

    // クライアントが切断した場合の処理
    socket.on('disconnect', () => {
      console.log('A client disconnected.')
    })
  })

  // CORS対策を一応、有効にした上でサーバーを設定する
  // corsMiddleware(req, res, () => {
  //   res.socket.server.io = io;
  //   res.end();
  // });
}
